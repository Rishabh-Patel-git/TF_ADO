# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Plan
    displayName: Init&Planning
    jobs:
      - job: 
        steps:
          - task: TerraformInstaller@1
            displayName: Installing terraform
            inputs:
              terraformVersion: '1.3.9'
          - task: TerraformTaskV4@4
            displayName: Terraform init command
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'azure_service'
              backendAzureRmResourceGroupName: 'rishabhpatel'
              backendAzureRmStorageAccountName: 'tfstorageaccount12'
              backendAzureRmContainerName: 'tf-container'
              backendAzureRmKey: 'tf/terraform.tfstate'
          - task: TerraformTaskV4@4
            displayName: Terraform plan command
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-out="plan.out" -lock=false'
              environmentServiceNameAzureRM: 'azure_service'
          - script: ls -al
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(system.defaultworkingdirectory)'
              Contents: '**'
              TargetFolder: '$(build.artifactstagingdirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
  - stage: Deploying
    displayName: Applying
    dependsOn: Plan
    jobs:
      - deployment: Deploy
        environment: dev
        strategy:
            runOnce:
              deploy:
                steps:
                - task: TerraformInstaller@1
                  inputs:
                    terraformVersion: '1.3.9'
                - script: chmod +x $(Pipeline.Workspace)/drop/.terraform/providers/registry.terraform.io/hashicorp/azuread/2.39.0/linux_amd64/terraform-provider-azuread_v2.39.0_x5
                - script: chmod +x $(Pipeline.Workspace)/drop/.terraform/providers/registry.terraform.io/microsoft/azuredevops/0.5.0/linux_amd64/terraform-provider-azuredevops_v0.5.0


                - task: TerraformTaskV4@4
                  displayName: Terraform init command
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/drop'
                    commandOptions: '-upgrade'
                    backendServiceArm: 'azure_service'
                    backendAzureRmResourceGroupName: 'rishabhpatel'
                    backendAzureRmStorageAccountName: 'tfstorageaccount12'
                    backendAzureRmContainerName: 'tf-container'
                    backendAzureRmKey: 'tf/terraform.tfstate'
                - task: TerraformTaskV4@4
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/drop'
                    commandOptions: '-lock=false "plan.out" '
                    environmentServiceNameAzureRM: 'azure_service'
                
                
                
                
          
          
   
